name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write  # ‚Üê allows creating releases and uploading assets

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## üöÄ New Release ${{ github.ref_name }}
            - Built automatically via GitHub Actions.
            - Includes Linux (musl) and Windows x86_64 builds.
            - Thank you for using this project!
          draft: true
          prerelease: false

  build:
    name: Build and Upload Binaries
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            container: alpine:3.20
            target: x86_64-unknown-linux-musl
            bin_ext: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_ext: ".exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Alpine only)
        if: ${{ matrix.container }}
        run: |
          apk add --no-cache curl gcc musl-dev openssl-dev pkgconfig rust git pcsc-lite-dev pcsc-lite-static

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload binary directly to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/nise${{ matrix.bin_ext }}
          asset_name: nise-${{ matrix.target }}${{ matrix.bin_ext }}
          asset_content_type: application/octet-stream
